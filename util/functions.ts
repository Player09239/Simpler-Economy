import Server from './server.js'
import User from './data.js'

export async function calculate_earned(base: number, currency: string, guild: string): Promise<number> {
    let s = await Server.findOne({ guildId: guild });
    if (!s || !s.vault) return base

    if (currency === 'cookies') {
        return base * (1 + (s.vault.cookies * 0.000002));
    } else if (currency === 'gems') {
        return base * (1 + (s.vault.gems * 0.000002));
    }
    return base
}

export async function format(input: number): Promise<string | number | undefined> {
    if (input < 1000) return Math.floor(input)
    if (input >= 1000 && input < 1000000) return (input / 1000).toFixed(2) + 'k'
    if (input >= 1000000 && input < 1000000000) return (input / 1000000).toFixed(2) + 'm'
    if (input >= 1000000000 && input < 1000000000000) return (input / 1000000000).toFixed(2) + 'b'
    if (input >= 1000000000000 && input < 1000000000000000) return (input / 1000000000000).toFixed(2) + 't'
    if (input >= 1000000000000000 && input < 1000000000000000000) return (input / 1000000000000000).toFixed(2) + 'qa'
    if (input >= 1000000000000000000 && input < 1000000000000000000000) return (input / 1000000000000000000).toFixed(2) + 'qn'
    if (input >= 1000000000000000000000 && input < 1000000000000000000000000) return (input / 1000000000000000000000).toFixed(2) + 'sx'
    if (input >= 1000000000000000000000000 && input < 1000000000000000000000000000) return (input / 1000000000000000000000000).toFixed(2) + 'sp'
    if (input >= 1000000000000000000000000000 && input < 1000000000000000000000000000000) return (input / 1000000000000000000000000000).toFixed(2) + 'oc'
    if (input >= 1000000000000000000000000000000 && input < 1000000000000000000000000000000000) return (input / 1000000000000000000000000000000).toFixed(2) + 'no'
    if (input >= 1000000000000000000000000000000000 && input < 1000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000).toFixed(2) + 'dc'
    if (input >= 1000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000).toFixed(2) + 'udc'
    if (input >= 1000000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000000).toFixed(2) + 'ddc'
    if (input >= 1000000000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000000000).toFixed(2) + 'tdc'
    if (input >= 1000000000000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000000000000).toFixed(2) + 'qadc'
    if (input >= 1000000000000000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000000000000000).toFixed(2) + 'qndc'
    if (input >= 1000000000000000000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000000000000000000).toFixed(2) + 'sxdc'
    if (input >= 1000000000000000000000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000000000000000000000).toFixed(2) + 'spdc'
    if (input >= 1000000000000000000000000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000000000000000000000000).toFixed(2) + 'ocdc'
    if (input >= 1000000000000000000000000000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000000000000000000000000000).toFixed(2) + 'nodc'
    if (input >= 1000000000000000000000000000000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000000000000000000000000000000).toFixed(2) + 'vg'
    if (input >= 1000000000000000000000000000000000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000000000000000000000000000000000).toFixed(2) + 'uvg'
    if (input >= 1000000000000000000000000000000000000000000000000000000000000000000000 && input < 1000000000000000000000000000000000000000000000000000000000000000000000000) return (input / 1000000000000000000000000000000000000000000000000000000000000000000000).toFixed(2) + 'dvg'
    if (input >= 1e66 && input < 1e69) return (input / 1e66).toFixed(2) + 'tvg'
    if (input >= 1e69 && input < 1e72) return (input / 1e69).toFixed(2) + 'qavg'
    if (input >= 1e72 && input < 1e75) return (input / 1e72).toFixed(2) + 'qnvg'
    if (input >= 1e75 && input < 1e78) return (input / 1e75).toFixed(2) + 'sxvg'
    if (input >= 1e78 && input < 1e81) return (input / 1e78).toFixed(2) + 'spvg'
    if (input >= 1e81 && input < 1e84) return (input / 1e81).toFixed(2) + 'ocvg'
    if (input >= 1e84 && input < 1e87) return (input / 1e84).toFixed(2) + 'novg'
    if (input >= 1e87 && input < 1e90) return (input / 1e87).toFixed(2) + 'tg'
}

